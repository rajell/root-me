#!/usr/bin/env python

from fractions import Fraction
import gmpy2
from Crypto.PublicKey import RSA

def continuedfraction(nu, de):
    '''
    Fraction nu/de to continued fraction
    '''
    cf = []
    while de:
        qu = nu // de
        cf.append(qu)
        nu, de = de, nu - de*qu
    return cf

def cf2f(cf):
    '''
    Continued fraction to fraction
    '''
    f = Fraction(0, 1)
    for x in reversed(cf):
        try:
            f = 1 / (f+x)
        except ZeroDivisionError:
            return Fraction(0, 1)
    return 1/f

def converg(cf):
    '''
    Continued faction to convergents
    '''
    for i in range(1,len(cf)+1):
        yield cf2f(cf[:i])
e=31186400897019474935110647285445503673131446580681275776311671951414114788622345838774311877965990786720764658784947421898983517760738477784602362371051561562206808351224503093181667456617648598165647915091757078611302190825934535904283579772712691438112230134828980258111970295516689690256373292215340475163958923723790536805165847711775268441953305309821252180479573636847217520184023025127620891001593596764466667387987683667801953315782130313468664428515728986226452261450588569245373362702725469848655817202090205940445626402571508469590603334162227644680600619967899413710405809040986903674088539812272861821091
n=65600461780989803766848392425426887870434366488494962966900808777432584484088221195303017908185765416426865541330492621828385095208401835694398180740583580467731175837961973916562100612373134902716587868046427380223327738540114777241641014871790815133235867909646828092331690444703436170746272569822738659402858823786521460740789564170287308513292418939316054128834222945338106076073139265530198099998748944323883371406422653204889570690803132164330855565516333393423122237578933112127930186731899656475860444002021681839995303291028010312901432208049210885186720776201994911765956299022808044735625894648965241701539

for cvg in converg(continuedfraction(e,n)):
    k = cvg.numerator
    if k == 0:
        continue
    d = cvg.denominator
   
    phi = (e*d-1)//k
    nb = n - phi + 1
    squ = nb*nb-4*n
    if squ < 0:
        continue
    print squ
    answer,boolean=gmpy2.iroot(squ,2)
   
    if boolean:
        p = (nb+answer)/2
        q = (nb-answer)/2
        d = d
        print 'voila le p='+str(p)
        print 'voila le q='+str(q)
        print 'voila le d='+str(d)
        key = RSA.construct((long(n), long(e), long(d), long(p), long(q)))
        print key.exportKey()
        break

private_key='''-----BEGIN RSA PRIVATE KEY-----
MIIEXgIBAAKCAQECB6ffnRc/WWmtFtwxhJaza+Of5YEgfm6jGNO/viLItIVgC6mB
GnjezG1aq3mhwsSR621POYIGV7ZoY5G4VHQXKuUE9I8C9+46KrMfzhz5wi9A6RmW
XH9nqKy/oR7k5+LzIXvJoFRYdQBCTQgGwOdZCBZR9uQGqaZC3m6OExy2RKEuRlc7
2CRtxeBn0qTxdv727sRFv6nbiIo1JXN25nEJ+qvjmwz4r+LKEj2oMU0J8kBJIvxB
FtaCpL2u7Lc/WcSdt/oSp/xcmBRUklyU4LVHLgLZJNrWLCYAZuB8fTsQidVHXCwG
a3+UVTx16FbjoqdzxsJNW6ZAVeuP6j5XsGsEowKCAQEA9ws710gBol7MveJOAbB3
Z34pg5HUGXsJmm+WEkTwQxTafeFE3WmoqoRoa/TdvRSmNEu8MVIY27rylJCkTkLl
xKKk52uBAaXKgjUcB7TP1OCAOMjVVzqCeyJ7zlFbcIZnJHGOwqwDNZYUzfQ92I8a
x+5FOReXWhPAGeYg5TEgdpIiQAnHXq7xHhMPjlTM4x6GyE6TZiGa5cJQhTvhReqH
3PN6p+zgqZQZWIXjHrzY/nQt8c0TcMlbZoSrbDfoR2IZPCfdNMPPP15plXuDOPkU
OgBSyTgdni7LnvUEyVS0U/V2MnBe1EsopLXL5hNo5IXaavLfyQHkWGjN1QBpE/M4
owJAZr7ln9D/ONqkfSGco4N7gQRoITmyrj9/XhF7MZQYzV6ZVN7TPUF8E5W7c2ha
hxw128jwHLJZTwa+dlS76h86IwKBgQGE3IuaqynPUZNHJCbpIWPkEXBjdYOx6ixQ
rgRROuQuZCgaUYONIAUaXb0aa9PiGQaCj3doytCyCjrx7Yrx/Wm3TlPI2U0AJ3Tv
Rjt4clWL+ntxMV0pvAJo9fYHAfR6wke8X8cTrTmfV51k3OpIXBZUQyd9oGJoicuE
qwOIcKQaNwKBgQFWGyYVufNaqQjJfMW/Jx6IWUL87CjAcchmDsbzwKbscQ6Fogva
aJV2s0bJF9+HgvQ9fswYl6JzpsSbniX+9LXHLzFxNdyX9VSx0bIs8CayjiYJQANG
jS7MEnFeKtArzDcf0nZrOjxmfIaFZmmjDJz1ytEXTgyWgHDtvKufI2KC9QJAZr7l
n9D/ONqkfSGco4N7gQRoITmyrj9/XhF7MZQYzV6ZVN7TPUF8E5W7c2hahxw128jw
HLJZTwa+dlS76h86IwJAZr7ln9D/ONqkfSGco4N7gQRoITmyrj9/XhF7MZQYzV6Z
VN7TPUF8E5W7c2hahxw128jwHLJZTwa+dlS76h86IwKBgH4kCjHhK3h5ZZKtvIQ4
zQtypJkw+IlkzlDzO8+9X3mStmpHlDjSYmgrb4kvMAp3WqBNMZvtLqYQcydsEwoh
myU5l7eqWqEHsno2iCXu+vS9DwrxcpgwcXFroI4D7awt5lHKPniFNQKXmE3uVYGd
LrNAfTJRPszGn8TE7wJV6dw7
-----END RSA PRIVATE KEY-----'''

        


